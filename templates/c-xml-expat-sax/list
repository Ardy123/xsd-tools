[@lua --define list type
	c_list = {}
	function c_list:new(base)
		local function calcName() 
			return table.concat({'xml_', base.c_type.name():gsub('[ *]', ''), 'List',})
		end
		return {
			type = 'c_list',
			c_type = {
				name = calcName(),
				definition = function() 
					return table.concat({
						'typedef struct {\n',
						'\t', base.c_type.name(), '\t*', base.buildVar('','pArray'), ';\n',
						'\tuint32_t\tm_nElements;\n',
						'} ', calcName(), ';\n',
					})
				end,
				statement = function(varName) 
					return table.concat({
						calcName(), '\tm_', varName, ';\n',
					})
				end,
			},
			delete = {
				definition = function() 
					local objArray = base.buildVar('pObj->','pArray')
					return table.concat({
						'static void _destroy_', calcName(), '(xml_marshaller* pMarshaller, ', calcName(), '* pObj) {\n',
						'\tif (', objArray, ') {\n',
						'\t\tunsigned ndx;\n',
						'\t\tfor (ndx = 0; ndx < pObj->m_nElements; ++ndx) {\n',
						'\t\t\t', base.delete.statement(objArray..'[ndx]'),
						'\t\t}\n',
						'\t\tpMarshaller->realloc(pMarshaller, ', objArray, ', 0);\n',
						'\t\}\n',
						'}\n',
					})
				end,
				statement = function(obj) 
					return table.concat({
						'_destroy_', calcName(), '(pMarshaller, &', obj, ');\n',
					})
				end,
			},
			buildVar = function(obj, member) 
				return table.concat({obj,'m_',member})
			end,
			baseType = function()
				return base
			end,
			binding = {
				marshal = {
					definition = function() 
						return table.concat({
							'static void _marshal_', calcName(), '(xml_marshaller* pMarshaller, xml_cstr* pOutStr, const ', calcName(), '* pObj) {\n',
							'\tunsigned ndx;\n',
							'\tfor (ndx = 0; ndx < pObj->m_nElements; ++ndx) {\n',
							'\t\t', base.binding.marshal.statement('pOutStr', base.buildVar('pObj->','pArray[ndx]')),
							'\t\t_cstr_append(pMarshaller, pOutStr, " ");\n',
							'\t}\n',
							'}\n',
						})
					end,
					statement = function(dst, obj)
						return table.concat({
							'_marshal_', calcName(), '(pMarshaller, ', dst, ', &', obj, ');\n',
						})
					end,
				},
				unmarshal = {
					definition = function() 
						return table.concat({
							'static void _unmarshal_', calcName(), '(xml_marshaller* pMarshaller, const char* pContent, ', calcName(), '* pObj) {\n',
							'\tunsigned maxSz = 0;\n',
							'\tchar* pToken, *pMutableContent = _CStrCpy(pMarshaller, pContent);\n',
							'\tfor (pObj->m_nElements = 0, pToken = strtok(pMutableContent, " \\t\\n\\r");\n',
							'\t\tpToken;\n',
							'\t\tpToken = strtok(NULL, " \\t\\n\\r"), pObj->m_nElements++) {\n',
							'\t\tif (maxSz == pObj->m_nElements) {\n',
							'\t\t\tmaxSz = maxSz ? (maxSz << 1) : 8;\n',
							'\t\t\t', base.buildVar('pObj->','pArray'), ' = pMarshaller->realloc(pMarshaller, ', base.buildVar('pObj->','pArray'), ', maxSz * sizeof(', base.c_type.name(), '));\n',
							'\t\t}\n',
							'\t\t', base.binding.unmarshal.statement('pToken', base.buildVar('pObj->', 'pArray[pObj->m_nElements]')),
							'\t}\n',
							'\tpMarshaller->realloc(pMarshaller, pMutableContent, 0);\n',
							'}\n',
						})
					end,
					statement = function(src, obj)
						return table.concat({
							'_unmarshal_', calcName(), '(pMarshaller, ', src, ', &', obj, ');\n'
						})
					end,
				},
			},
			test = {
				subDef = function(var)
					local value = { base.test.assign(), base.test.assign(), base.test.assign() }
					return table.concat({
						"static ", base.c_type.name(), " ", var, "[] = { ", table.concat(value, ", "), " };\n"
					})
				end,
				assign = function(subDefObj)
					return string.format(
						'{ %s = %s, .m_nElements = sizeof(%s)/sizeof(%s[0]) }', 
						base.buildVar('.','pArray'), 
						subDefObj, subDefObj, subDefObj
					)
				end,
				assert = function(obj1, obj2)
					return table.concat({
						string.format("\tassert(%s.m_nElements ==  %s.m_nElements);\n", obj1, obj2),
						"\t{\n",
						"\t\tunsigned ndx;\n",
						string.format("\t\tfor(ndx = 0; ndx < %s.m_nElements; ++ndx) {\n", obj1),
						"\t\t", base.test.assert(obj1..base.buildVar('.','pArray')..'[ndx]', obj2..base.buildVar('.','pArray')..'[ndx]'),
						"\t\t}\n",
						"\t}\n",
					})
				end
			},
		}
	end
]