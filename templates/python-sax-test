[@lua --include and transform old format
	include 'shared/trnsfrm_old'
	schema = trnsfrm_oldFmt(schema)
][@lua --include any shared 'helper' templates
	return include 'shared/schemaEx'
][@lua -- include python type info
	return include 'python-xml/python_type_info'
][@lua --rename any non-c-safe names to c-safe names & sort dependencies so that they are matched correctly
	schema = schema.c_safeNames()
][@lua -- create friendly root schema name
	schemaName = schema.types[schema.root].name:gsub("_xsd$", "")
]import io
import [@lua return schemaName]

test = [
[@lua --output each test xml file
	local outbuf = stringBuffer:new()
	local function dpOutput(_, node)
		outbuf:append(table.concat({'<', node.name}))
		table.map(node.attributes, function(attribName, attrib)
			outbuf:append(table.concat({
				' ', attribName, '=\\"', py_type_info[attrib.type].test.assign(), '\\"',
			}))
		end)
		outbuf:append('>')
		if next(node.content) then
			outbuf:append(py_type_info[node.content.type].test.assign())
		end
		if next(node.dependents) then
			table.map(node.dependents, dpOutput)
		end
		outbuf:append(table.concat({'</', node.name, '>'}))
	end
	table.map(schema.types[schema.root].dependents, function(name, node)
		outbuf:append('    "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\\n" \\\n    "')
		dpOutput(name, node)
		outbuf:append('",\n')
	end)
	return outbuf:str()
]]


def runTest(xmlstr):
    outStr = io.StringIO()
    root = [@lua return schemaName].xml_[@lua return schema.root]()
    root.unmarshal(io.StringIO(xmlstr))
    root.marshal(outStr)
    testval = outStr.getvalue() 
    assert testval == xmlstr

for testxml in test:
    runTest(testxml)

