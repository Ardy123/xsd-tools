[@lua --define double type
	ctype_double = {
		type = 'c_type',
		c_type = {
			name = function() 
				return 'double'
			end,
			definition = function() 
				return ''
			end,
			statement = function(varName) 
				return table.concat({
					'double\tm_', varName, ';\n',
				})
			end,
		},
		delete = {
			definition = function() 
				return ''
			end,
			statement = function(obj) 
				return ''
			end,
		},
		buildVar = function(obj, member) 
			return table.concat({obj,'m_',member})
		end,
		binding = {
			marshall = {
				definition = function() 
					return table.concat({
						'void _marshall_double(xml_marshaller* pMarshaller, xml_cstr* pOutStr, const double val) {\n',
						'\tchar valBuf[256];\n',
						'\tsnprintf(valBuf, sizeof(valBuf), "%f", val);\n',
						'\t_cstr_append(pMarshaller, pOutStr, valBuf);\n',
						'}\n',
					})
				end,
				statement = function(dst, obj)
					return table.concat({
						'_marshall_double(pMarshaller, ', dst, ', ', obj, ');\n',
					})
				end,
			},
			unmarshall = {
				definition = function() 
					return ''
				end,
				statement = function(src, obj)
					return table.concat({
						obj, ' = atof(', src, ');\n',
					})
				end,
			},
		},
		test = {
			assign = function()
				return tostring(math.random() * math.random(-32767, 32767))
			end,
			assert = function(obj1, obj2)
				return string.format("assert(%s == %s);\n", obj1, obj2)
			end
		},
	}
]