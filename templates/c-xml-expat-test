[@lua --include and transform old format
	include 'shared/trnsfrm_old'
	schema = trnsfrm_oldFmt(schema)
][@lua --include any shared 'helper' templates
	return include 'shared/schemaEx'
][@lua --include xsd to c type mapping
	return include 'c-xml-expat-sax/c_type_info'
][@lua --generate helper globals
	schema = schema.c_safeNames()
	uniqueXSDTypes = schema.uniqueTypes()
	-- map xsd types to unique c-types
	uniqueCTypes = {}
	table.map(uniqueXSDTypes, function(_, v)
		local ctype = c_type_info[v]
		uniqueCTypes[ctype] = ctype
		if 'c_list' == ctype.type then
			local baseType = ctype.baseType()
			uniqueCTypes[baseType] = baseType
		end
	end)
	typeSansRoot = table.filter(schema.types, function(k,v) return v.name ~= schema.root and v or nil end)
][@lua -- create friendly root schema name
	schemaName = schema.types[schema.root].name:gsub("_xsd$", "")
]
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include "xml_[@lua return schemaName].h"

[@lua -- output test data
	local outbuf = stringBuffer:new()
	-- find all list types so that they can be declared in C as two stages
	local listTypes = table.filter(uniqueCTypes, function(_,v) return 'c_list' == v.type and v or nil end)
	-- generate a reverse mapping from list 1st stage declarations to list type
	local listTypeVarMap = {}
	local ndx = 1
	table.map(listTypes, function(_,v)
		listTypeVarMap[v] = 'list'..ndx
		ndx = ndx + 1
	end)
	-- output declaration of the first stage for lists ie list values
	table.map(listTypes, function(_,v)
		outbuf:append(v.test.subDef(listTypeVarMap[v]))
	end)
	-- output stage declarations of objects (main declarations)
	local ID = 1
	table.map(typeSansRoot, function(_, node)
		-- build list of attributes to output test values for
		valTbl = {'._eid = '..tostring(ID)}
		local prcssType = function(ncname, xsdType)
			local c_type = c_type_info[xsdType.type]
			if "c_list" == c_type.type then
				local cVarName = listTypeVarMap[c_type]
				table.insert(valTbl, c_type.buildVar('.',ncname)..' = '..c_type.test.assign(cVarName))
			else
				table.insert(valTbl, c_type.buildVar('.',ncname)..' = '..c_type.test.assign())
			end
		end
		table.map(node.attributes, prcssType)
		if next(node.content) then
			prcssType("Content", node.content)
		end
		outbuf:append(table.concat({
			"static const xml_", node.name, " ", node.name, "Tst = {", table.concat(valTbl, ','),"};\n",
		}));
		-- inc the ID
		ID = ID + 1
	end)
	return outbuf:str()
]

static void* reallocCb(struct xml_marshaller* pMarshaller, void* pMem, size_t size) {
	(void)pMarshaller;
	return realloc(pMem, size);
}

[@lua -- output unmarshal functions
	local outbuf = stringBuffer:new()
	table.map(typeSansRoot, function(_, node)
		outbuf:append(table.concat({
			"static void unmarshal_", node.name, "(struct xml_marshaller* pMarshaller, const xml_", node.name, "* pObj, uint32_t parent) {\n",
			"\t(void)pMarshaller;\n",
			"\t(void)parent;\n",
			"\t(void)pObj;\n",
		}))
		local prcssType = function(ncname, xsdtype)
			local c_type = c_type_info[xsdtype.type]
			outbuf:append(c_type.test.assert(c_type.buildVar('pObj->', ncname), c_type.buildVar(node.name..'Tst'..'.', ncname)))
		end
		table.map(node.attributes, prcssType)
		if next(node.content) then
			prcssType("Content", node.content)
		end
		outbuf:append("}\n")
	end)
	return outbuf:str()
]

int main(void) {
	xml_buffer output;
	xml_marshaller mrshllr = { 
		.realloc = reallocCb,
[@lua --output unmarshal function assignments
	local tbl = {}
	table.map(typeSansRoot, function(_, node)
		table.insert(tbl, "\t\t.unmarshal_"..node.name.." = unmarshal_"..node.name)
	end)
	return table.concat(tbl, ",\n")
]
	};
	/* test marshalling */
[@lua --output marshalling struct declrs
	local outbuf = stringBuffer:new()
	table.map(typeSansRoot, function(_,node)
		if next(node.dependents) then
			outbuf:append(table.concat({
				"\txml_marshal_", node.name, " ", node.name, ";\n",
			}))
		end
	end)
	return outbuf:str()
][@lua -- output marshalling start
	if next(schema.types[schema.root].dependents) then
		return table.concat({
			'\txml_marshal_', schema.root, ' ', schema.root, ' = xml_marshal(&mrshllr);\n'
		})
	else
		return table.concat({
			'\txml_marshal(&mrshllr);\n'
		})
	end
][@lua --output marshalling statments
	local outbuf = stringBuffer:new()
	local function marshalRec(parent, node)
		if next(node.dependents) then
			outbuf:append(table.concat({
				"\t", node.name, " = ", parent, ".marshal_", node.name, "(&mrshllr, &", node.name, "Tst);\n"
			}))
		else
			outbuf:append(table.concat({
				"\t", parent, ".marshal_", node.name, "(&mrshllr, &", node.name, "Tst);\n"
			}))
		end
		table.map(node.dependents, function(k, v)
			if next(v.dependents) then
				outbuf:append(table.concat({
					"\t", node.name, ".marshal_",k,"(&mrshllr, &", k, "Tst);\n"
				}))
			end
		end)
	table.map(node.dependents, function(_,v) marshalRec(node.name,v) end)
	end
	table.map(schema.types[schema.root].dependents, function(_,v) marshalRec(schema.root, v) end)
	return outbuf:str()
]	output = xml_marshal_flush(&mrshllr, 1);
	/* test unmarshalling */
	xml_unmarshal(&mrshllr, &output, 1);
	/* clean up */
	output.m_pBuf = realloc(output.m_pBuf, 0);
	return 0;
}
