[@lua --include and transform old format
	include 'shared/trnsfrm_old'
	schema = trnsfrm_oldFmt(schema)
][@lua --include any shared 'helper' templates
	return include 'shared/schemaEx'
][@lua -- include python type info
	include 'python-xml/python_type_info'
][@lua --rename any non-c-safe names to c-safe names & sort dependencies so that they are matched correctly
	schema = schema.c_safeNames()
	depOrder = schema.sortDependencies()
	depOrderSansRoot = table.filter(depOrder, function(k,v) return v.name ~= schema.root and v or nil end)
]import base64
import binascii
import xml.sax


class _handler(xml.sax.ContentHandler):
    def __init__(self):
        xml.sax.ContentHandler.__init__(self)
        self._elemStk = []
        self._elemTbl = {
[@lua --output element creation functions: 'gooTest':lambda: xml_gooTest()
	local outbuf = stringBuffer:new()
	local methodFmtStr = '            \'%s\': lambda: xml_%s(),\n'
	table.map(depOrderSansRoot, function(k,v) outbuf:append(methodFmtStr:format(v.name, v.name)) end)
	return outbuf:str()
]       }

    # methods inherited from xml.sax.ContentHandler
    def startDocument(self):
        self._elemStk = [("testA021", {}, [])]

    def startElementNS(self, name, qname, SAXAttributes):
        element = self._elemTbl[name[1]]()
        elementRecord = (element, self._convertToDictionary(SAXAttributes),  [])
        self._elemStk[-1][2].append(element)
        self._elemStk.append(elementRecord)

    def characters(self, content): 
        if self._elemStk[-1][2] and isinstance(self._elemStk[-1][2][-1], str):
            self._elemStk[-1][2][-1] = self._elemStk[-1][2][-1] + content
        else:
            self._elemStk[-1][2].append(content)

    def endElementNS(self, name, qname):
        elementRecord = self._elemStk.pop()
        elementRecord[0].unmarshal(elementRecord[1], elementRecord[2])

    @staticmethod
    def _convertToDictionary(SAXAttributes):
        return {k: SAXAttributes.getValueByQName(k) for k in SAXAttributes.getQNames() }


class _xmlelement:
    def __init__(self):
        self._content = []

    def getContent(self):
        return self._content

[@lua -- output class for each element
	local outbuf = stringBuffer:new()
	table.map(depOrderSansRoot, function(_, node)
		outbuf:append(table.concat({
			'\n',
			'class xml_', node.name, '(_xmlelement):\n',
			'    def __init__(self):\n',
			'        _xmlelement.__init__(self)\n'
		}))
		-- output default attribute values
		if next(node.attributes) then
			table.map(node.attributes, function(attributeName, attribute)
				if attribute.default then
					local pyType = py_type_info[attribute.type]
					outbuf:append(pyType.default(attributeName, attribute.default))
				else
					outbuf:append(table.concat({'        self._', attributeName, ' = None\n'}))
				end
			end)
		end
		outbuf:append(table.concat({
			'\n',
			'    def marshal(self, stream):\n',
			'        stream.write(\'<', node.name, '\')\n',
		}))
		-- output marshal code for each element attribute
		table.map(node.attributes, function(attributeName, attribute)
			local pyType = py_type_info[attribute.type]
			outbuf:append(pyType.marshal.attribute(attributeName))
		end)
		outbuf:append('        stream.write(\'>\')\n')
		if next(node.content) then
			outbuf:append(py_type_info[node.content.type].marshal.content())
		else
			outbuf:append(table.concat({
				"        for node in filter(lambda x: isinstance(x, _xmlelement), self.getContent()):\n",
				"            node.marshal(stream)\n"
			}))
		end
		outbuf:append(table.concat({
			'        stream.write(\'</', node.name, '>\')\n',
			'\n',
			'    def unmarshal(self, attributes, content):\n',
		}))
		-- output unmarshal code for each element attribute
		if next(node.attributes) then
			outbuf:append('        for attribute in attributes:\n')
			table.map(node.attributes, function(attributeName, attribute)
				local pyType = py_type_info[attribute.type]
				outbuf:append(pyType.unmarshal.attribute(attributeName))
			end)
		end
		if next(node.content) then
			outbuf:append(py_type_info[node.content.type].unmarshal.content())
		else
			outbuf:append(table.concat({
				"        self._content = content\n"
			}))
		end
		outbuf:append('\n')
		-- output 'getters' code for each attribute
		table.map(node.attributes, function(attributeName, attribute)
			outbuf:append(table.concat({
				'    def ', attributeName, '(self):\n',
				'        return self._', attributeName, '\n',
				'\n'
			}))
		end)
		-- output 'setters' code for each attribute
		table.map(node.attributes, function(attributeName, attribute)
			outbuf:append(table.concat({
				'    def set_', attributeName, '(self, value):\n',
				'        self._', attributeName, '= value\n',
				'\n'
			}))
		end)
		outbuf:append('\n')
	end)
	return outbuf:str()
]
class xml_[@lua return schema.root](_handler, _xmlelement):
    def __init__(self):
        _handler.__init__(self)
        _xmlelement.__init__(self)

    def marshal(self, stream):
        stream.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n")
        for elm in self.getContent():
            elm.marshal(stream)

    def unmarshal(self, stream):
        parser = xml.sax.make_parser()
        parser.setFeature(xml.sax.handler.feature_namespaces, 1)
        parser.setContentHandler(self)
        parser.parse(stream)
        self._content = self._elemStk[-1][2]


