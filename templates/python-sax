[@lua --include any shared 'helper' templates
	return include 'shared/schemaEx'
][@lua -- include python type info
	include 'python-xml/python_type_info'
][@lua --rename any non-c-safe names to c-safe names & sort dependencies so that they are matched correctly
	schema = schema.c_safeNames()
	depOrder = schema.sortDependencies()
	depOrderSansRoot = table.filter(depOrder, function(k,v) return v.name ~= schema.root and v or nil end)
]import cStringIO
import xml.sax

class _handler(xml.sax.ContentHandler):
	def __init__(self):
		xml.sax.ContentHandler.__init__(self)
		self._elemTbl = {
[@lua --output element creation functions: 'gooTest':lambda: xml_gooTest()
	local outbuf = stringBuffer:new()
	local methodFmtStr = '\t\t\t\'%s\':lambda: xml_%s(),\n'
	table.map(depOrderSansRoot, function(k,v) outbuf:append(methodFmtStr:format(v.name, v.name)) end)
	return outbuf:str()
]		}
		return
	# methods inherited from xml.sax.ContentHandler
	def startDocument(self):
		self._elemStk = [("testA021", {}, [])]
		return
	def startElementNS(self, name, qname, SAXAttributes):
		element = self._elemTbl[name[1]]()
		elementRecord = (element, self._convertToDictionary(SAXAttributes),  [])   
		self._elemStk[-1][2].append(element)    
		self._elemStk.append(elementRecord)        
		return
	def characters(self, content): 
		if self._elemStk[-1][2] and isinstance(self._elemStk[-1][2][-1], basestring):
			self._elemStk[-1][2][-1] = self._elemStk[-1][2][-1] + content;
		else:
			self._elemStk[-1][2].append(content)
		return
	def endElementNS(self, name, qname):
		elementRecord = self._elemStk.pop()
		elementRecord[0].unmarshall(elementRecord[1], elementRecord[2])
		return
	@staticmethod
	def _convertToDictionary(SAXAttributes):
		return {k: SAXAttributes.getValueByQName(k) for k in SAXAttributes.getQNames() }

class _xmlelement:
	def __init__(self):
		self._content = []
		return
	def getContent(self):
		return self._content

[@lua -- output class for each element
	local outbuf = stringBuffer:new()
	table.map(depOrderSansRoot, function(_, node)
		outbuf:append(table.concat({ 
			'class xml_', node.name, '(_xmlelement):\n',
			'\tdef __init__(self):\n',
			'\t\t_xmlelement.__init__(self)\n'
		}))
		-- output default attribute values
		if next(node.attributes) then
			table.map(node.attributes, function(attributeName, attribute)
				if attribute.default then
					local pyType = py_type_info[attribute.type]
					outbuf:append(pyType.default(attributeName, attribute.default))
				else
					outbuf:append(table.concat({'\t\tself._', attributeName, ' = None\n'}))
				end
			end)
		end
		outbuf:append(table.concat({
			'\t\treturn\n',
			'\tdef marshall(self, stream):\n',
			'\t\tstream.write(\'<', node.name, '\')\n',
		}))
		-- output marshall code for each element attribute
		table.map(node.attributes, function(attributeName, attribute)
			local pyType = py_type_info[attribute.type]
			outbuf:append(pyType.marshall.attribute(attributeName))
		end)
		outbuf:append('\t\tstream.write(\'>\')\n')
		if next(node.content) then
			outbuf:append(py_type_info[node.content.type].marshall.content())
		else
			outbuf:append(table.concat({
				"\t\tfor node in filter(lambda x: isinstance(x, _xmlelement), self.getContent()):\n",
				"\t\t\tnode.marshall(stream)\n"
			}))
		end
		outbuf:append(table.concat({
			'\t\tstream.write(\'</', node.name, '>\')\n',
			'\t\treturn\n',
			'\tdef unmarshall(self, attributes, content):\n',
		}))
		-- output unmarshall code for each element attribute
		if next(node.attributes) then
			outbuf:append('\t\tfor attribute in attributes:\n')
			table.map(node.attributes, function(attributeName, attribute)
				local pyType = py_type_info[attribute.type]
				outbuf:append(pyType.unmarshall.attribute(attributeName))
			end)
		end
		if next(node.content) then
			outbuf:append(py_type_info[node.content.type].unmarshall.content())
		else
			outbuf:append(table.concat({
				"\t\tself._content = content\n"
			}))
		end
		outbuf:append('\t\treturn\n')
		-- output 'getters' code for each attribute
		table.map(node.attributes, function(attributeName, attribute)
			outbuf:append(table.concat({
				'\tdef ', attributeName, '(self):\n',
				'\t\treturn self._', attributeName, '\n'
			}))
		end)
		-- output 'setters' code for each attribute
		table.map(node.attributes, function(attributeName, attribute)
			outbuf:append(table.concat({
				'\tdef set', attributeName:sub(1,1):upper()..attributeName:sub(2), '(self, value):\n',
				'\t\tself._', attributeName, '= value\n'
			}))
		end)
		outbuf:append('\n')
	end)
	return outbuf:str()
]class xml_[@lua return schema.root](_handler, _xmlelement):
	def __init__(self):
		_handler.__init__(self)
		_xmlelement.__init__(self)
		return
	def marshall(self, stream):
		stream.write("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n")
		for elm in self.getContent():
			elm.marshall(stream)
		return
	def unmarshall(self, stream):
		parser = xml.sax.make_parser()
		parser.setFeature(xml.sax.handler.feature_namespaces, 1)
		parser.setContentHandler(self)
		parser.parse(stream)
		self._content = self._elemStk[-1][2]
		return

