[@lua --define python hex type
	pythontype_listBase64 = {
		marshal = {
			attribute = function(attribName)
				return table.concat({
					"        stream.write(' ", attribName, "=\"' + \" \".join([x.encode(\"base64\") for x in self._", attribName, "])\"')\n",
				})
			end,
			content = function()
				return table.concat({
					"        stream.write(\" \".join([x.encode(\"base64\") for x in self.getContent()]))\n",
				})
			end,
		},
		unmarshal = {
			attribute = function(attribName)
				return table.concat({
					"            if \"", attribName, "\" == attribute:\n",
					"                self._", attribName, " = [x.decode(\"base64\") for x in attributes[attribute].split(\" \")]\n"
				})
			end,
			content = function()
				return table.concat({
					"        self._content = [x.decode(\"base64\") for x in content[0].split(\" \")]\n",
				})
			end
		},
		default = function(attribName, value)
			return table.concat({"        self._", attribName, " = [x.decode(\"base64\") for x in \"", value, "\".split(\" \")]\n"})
		end,
		test = {
			assign = function()
			       local ret = {
			       	     "Q3yj/lYzNI0Fp0SrC8sctw==\\n",
				     "kpxzQiW1uLkFessP+5xZjQ==\\n",
				     "/kFxXF8edN6Dt3L99Y6aFQ==\\n",
				     "PceWThKB0OQoYk6O0nigSw==\\n",
				     "KDk10Nf+vS+JrzsYzRuDRw==\\n" }
				return table.concat({
				       ret[math.random(1, 5)],
				       ret[math.random(1, 5)],
				       ret[math.random(1, 5)],
				}, " ")
			end,
		}
	}
]