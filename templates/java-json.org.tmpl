[@lua
  -- function to iterate through schema table
  function parse(XSDDoc, processor) 
	local visitTable = {}
	local outStrm = stringBuffer:new()
	local function parseElement(name, XMLElement)
	  -- end case of iteration
	  if nil == XMLElement or visitTable[name] ~= nil then
		return
	  else 
		visitTable[name] = true
	  end
	  -- call on all child elements
	  table.map(XMLElement.content, parseElement);
	  -- processing
	  outStrm:append(processor(name, XMLElement)) 
	end
	local rootElement = { content=XSDDoc, attributes={} }
	parseElement('', rootElement)
	-- incase any changes have occured to schema
	schema = rootElement.content
	return outStrm:str()
  end
  -- functon to fixup element/attribute names which may be invalid java names
  function nameFixup(name, XSDElement)
	local newContent = {}
	local newAttributes = {}
	table.map(XSDElement.attributes, function(attribName, attribObj)
		local attribName = attribName:gsub('-', '_')
		newAttributes[attribName] = attribObj 
	  end
	)
	table.map(XSDElement.content, function(childName, childElement)
		local childName = childName:gsub('-', '_')
		newContent[childName] = childElement
	  end
	)
	XSDElement.attributes = newAttributes
	XSDElement.content    = newContent
  end
  --imports element parser code
  include 'java-json.org/parse.lua'
  -- fixup names
  parse(schema, nameFixup)
]/* command to split output: csplit - '/\/\* FILE: /' {*} */
/* FILE: Marshallable.java */
package com.mobitv.generated.json;

import org.json.JSONObject;
import org.json.JSONException;

public interface Marshallable {
    public JSONObject marshall() throws JSONException;
}

/* FILE: JSONObjectAdapter.java */
/* This file was generated by xsdb */
package com.mobitv.generated.json;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import org.json.JSONException;
import org.json.JSONObject;


public class JSONObjectAdapter {
	private JSONObject _jObj;
	
	public JSONObjectAdapter(JSONObject jObj) {
		_jObj = jObj;
	}
	JSONObject getJSONObject() {
		return _jObj;
	}
	public String getString(String key) throws JSONException {
		return _jObj.getString(key);
	}	
	public int getInt(String key) throws JSONException {
		return _jObj.getInt(key);
	}
	public long getLong(String key) throws JSONException {
		return _jObj.getLong(key);
	}
	public double getDouble(String key) throws JSONException {
		return _jObj.getDouble(key);
	}	
	public JSONObjectAdapter getObject(String key) throws JSONException {
		return new JSONObjectAdapter(_jObj.getJSONObject(key));
	}
	public JSONArrayAdapter getList(String key) throws JSONException {
		return new JSONArrayAdapter(_jObj.getJSONArray(key));
	}		
	public byte[] getBase64(String key) throws JSONException {
		return Base64.decodeBase64(_jObj.getString(key));
	}
	public byte[] getHex(String key) throws JSONException, DecoderException {
		return Hex.decodeHex(_jObj.getString(key).toCharArray());
	}	
	public JSONObjectAdapter put(String key, String value) throws JSONException {
		return new JSONObjectAdapter(_jObj.put(key, value));
	}
	public JSONObjectAdapter put(String key, int value) throws JSONException {
		return new JSONObjectAdapter(_jObj.put(key, value));
	}
	public JSONObjectAdapter put(String key, long value) throws JSONException {
		return new JSONObjectAdapter(_jObj.put(key, value));
	}
	public JSONObjectAdapter put(String key, double value) throws JSONException {
		return new JSONObjectAdapter(_jObj.put(key, value));
	}
	public JSONObjectAdapter put(String key, JSONArrayAdapter value) throws JSONException {
		return new JSONObjectAdapter(_jObj.put(key, value.getJSONArray()));
	}	
	public JSONObjectAdapter putBase64(String key, byte [] buffer) throws JSONException {
		return new JSONObjectAdapter(_jObj.put(key, Base64.encodeBase64String(buffer)));
	}
	public JSONObjectAdapter putHex(String key, byte [] buffer) throws JSONException {
		return new JSONObjectAdapter(_jObj.put(key, Hex.encodeHexString(buffer)));
	}
}

/* FILE: JSONArrayAdapter.java */
/* This file was generated by xsdb */
package com.mobitv.generated.json;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import org.json.JSONArray;
import org.json.JSONException;


public class JSONArrayAdapter {
	private JSONArray _jObj;
	
	public JSONArrayAdapter(JSONArray jObj) {
		_jObj = jObj;
	}
	JSONArray getJSONArray() {
		return _jObj;
	}
	public String getString(int ndx) throws JSONException {
		return _jObj.getString(ndx);
	}	
	public int getInt(int ndx) throws JSONException {
		return _jObj.getInt(ndx);
	}
	public long getLong(int ndx) throws JSONException {
		return _jObj.getLong(ndx);
	}
	public double getDouble(int ndx) throws JSONException {
		return _jObj.getDouble(ndx);
	}	
	public JSONObjectAdapter getObject(int ndx) throws JSONException {
		return new JSONObjectAdapter(_jObj.getJSONObject(ndx));
	}		
	
	public JSONArrayAdapter getList(int ndx) throws JSONException {
		return new JSONArrayAdapter(_jObj.getJSONArray(ndx));
	}		
	public byte[] getBase64(int ndx) throws JSONException {
		return Base64.decodeBase64(_jObj.getString(ndx));
	}
	public byte[] getHex(int ndx) throws JSONException, DecoderException {
		return Hex.decodeHex(_jObj.getString(ndx).toCharArray());
	}	
	public JSONArrayAdapter put(String value) throws JSONException {
		return new JSONArrayAdapter(_jObj.put(value));
	}
	public JSONArrayAdapter put(int value) throws JSONException {
		return new JSONArrayAdapter(_jObj.put(value));
	}
	public JSONArrayAdapter put(long value) throws JSONException {
		return new JSONArrayAdapter(_jObj.put(value));
	}
	public JSONArrayAdapter put(double value) throws JSONException {
		return new JSONArrayAdapter(_jObj.put(value));
	}
	public JSONArrayAdapter put(JSONArrayAdapter value) throws JSONException {
		return new JSONArrayAdapter(_jObj.put(value.getJSONArray()));
	}
	public JSONArrayAdapter put(Marshallable value) throws JSONException {
		return new JSONArrayAdapter(_jObj.put(value.marshall()));
	}
	public JSONArrayAdapter putBase64(byte [] buffer) throws JSONException {
		return new JSONArrayAdapter(_jObj.put(Base64.encodeBase64String(buffer)));
	}
	public JSONArrayAdapter putHex(byte [] buffer) throws JSONException {
		return new JSONArrayAdapter(_jObj.put(Hex.encodeHexString(buffer)));
	}
	public int length() {
		return _jObj.length();
	}
}
[@lua
  -- make marshalling/unmarshalling code
  return parse(schema, elementParser)
]