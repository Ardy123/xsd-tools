[@lua
include 'c-xml-expat-dom/baseType'

hex = {}
hex.__index = hex
setmetatable(hex, {__index = baseType})

function hex:new(typeFactory, typedef)
   local retObj = baseType:new(typeFactory, typedef)
   setmetatable(retObj, hex)
   return retObj
end

function hex:typeName()
   return ("xml_hex")
end

function hex:typeDef()
   out = stringBuffer:new()
   out:append("typedef struct xml_hex {\n")
   out:append("  unsigned  m_size;\n")
   out:append("  void * m_pData;\n")
   out:append("} * xml_hex;\n")
   return out:str()
end

function hex:typeFactoryMethods()
   return ""
end

function hex:defMarshall()
   out = stringBuffer:new()
   out:append("static void\n")
   out:append("_xml_hex_marshall(const xml_hex val, char ** ppOut, const xml_typeFactory * pFactory) {\n")
   out:append("  int ndx;\n")
   out:append("  static const char hexTbl[] = { \n")
   out:append("    '0', '1', '2', '3', '4', '5', '6', '7', \n")
   out:append("    '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' \n")
   out:append("  };\n")
   out:append("  char * pHexBuf = _alloc((val->m_size << 1) + 1, pFactory);\n")
   out:append("  for(ndx = 0; ndx < val->m_size; ++ndx) {\n")
   out:append("    pHexBuf[ndx << 1] = hexTbl[((const char *)val->m_pData)[ndx] >> 4];\n")
   out:append("    pHexBuf[(ndx << 1) + 1] = hexTbl[((const char *)val->m_pData)[ndx] & 0x0F];\n")
   out:append("  }\n")
   out:append("  pHexBuf[ndx << 1] = 0;\n")
   out:append("  _cstr_append(ppOut, pHexBuf, pFactory);\n")
   out:append("  pHexBuf = ReallocateMemory(pFactory, pHexBuf, 0);\n")
   out:append("}\n")
   return out:str()
end

function hex:defUnmarshall()
   out = stringBuffer:new()
   out:append("static xml_hex\n")
   out:append("_xml_hex_unmarshall(const char * pVal, const xml_typeFactory * pFactory) {\n")
   out:append("  static const unsigned char hexTbl[256] = {")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n")
   out:append("    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n")
   out:append("  };\n")
   out:append("  unsigned char * pOutItr, shiftFlag = 0x4, accum = 0;\n")
   out:append("  xml_hex pRet = _alloc(sizeof(struct xml_hex), pFactory);\n")
   out:append("  pRet->m_pData = _alloc(strlen(pVal) >> 1, pFactory);\n")
   out:append("  for (pOutItr = (unsigned char *)(pRet->m_pData); *pVal; ++pVal) {\n")
   out:append("    const unsigned char bin = hexTbl[*((unsigned char *)pVal)];\n")
   out:append("    if(0xFF != bin) {\n")
   out:append("      accum |= bin << shiftFlag;\n")
   out:append("      shiftFlag ^= 0x4;\n")
   out:append("      if (shiftFlag) {\n")
   out:append("	       *pOutItr++ = accum;\n")
   out:append("	       accum = 0;\n")
   out:append("      }\n")
   out:append("    }\n")
   out:append("  }\n")
   out:append("  pRet->m_size = pOutItr - (unsigned char *)(pRet->m_pData);\n")
   out:append("  return pRet;\n")
   out:append("}\n")
   return out:str()
end

function hex:defDestroy()
   out = stringBuffer:new()
   out:append("static xml_hex\n")
   out:append("_xml_hex_destroy(xml_hex pVal, const xml_typeFactory * pFactory) {\n")
   out:append("  if (pVal) {\n")
   out:append("    pVal->m_pData = ReallocateMemory(pFactory, pVal->m_pData, 0);\n")
   out:append("    pVal = ReallocateMemory(pFactory, pVal, 0);\n")
   out:append("  }\n")
   out:append("  return pVal;\n")
   out:append("}\n")
   return out:str()
end

function hex:test()
   return "5468697320697320612074657374"
end
]