[@lua
include 'c-xml-expat-dom/baseType'

byte = {}
byte.__index = byte
setmetatable(byte, {__index = baseType})

function byte:new(typeFactory, typedef)
   local retObj = baseType:new(typeFactory, typedef)
   setmetatable(retObj, byte)
   return retObj
end

function byte:typeName()
   return ("xml_byte")
end

function byte:typeDef()
   return ("typedef int8_t * %s;\n"):format(self:typeName())
end

function byte:typeFactoryMethods()
   return ""
end

function byte:defMarshal(elementName)
   out = stringBuffer:new()
   out:append("static void")
   out:append("_xml_byte_marshal")
   out:append("(const xml_byte pVal, char ** ppOut, const xml_typeFactory * pFactory) {\n")
   out:append("  char num[4];\n")
   out:append("  snprintf(num, 4, \"%d\", *pVal);\n")
   out:append("  _cstr_append(ppOut, num, pFactory);\n")
   out:append("}\n")   
   return out:str()
end

function byte:defUnmarshal(elementName)
   out = stringBuffer:new()
   out:append("static xml_byte\n")
   out:append("_xml_byte_unmarshal(")
   out:append("const char * pVal, const xml_typeFactory * pFactory) {\n")
   out:append("  xml_byte val = ReallocateMemory(pFactory, NULL, sizeof(int8_t));\n")
   out:append("  return (*val  = atoi(pVal)), val;\n")
   out:append("}\n")
   return out:str()
end

function byte:defDestroy()
   out = stringBuffer:new()
   out:append("static xml_byte\n")
   out:append("_xml_byte_destroy")
   out:append("(xml_byte pVal, const xml_typeFactory * pFactory) {\n")
   out:append("  if (pVal) pVal = ReallocateMemory(pFactory, pVal, 0);\n")
   out:append("  return pVal;\n")
   out:append("}\n")
   return out:str()
end

function byte:test()
   return "122"
end
]
