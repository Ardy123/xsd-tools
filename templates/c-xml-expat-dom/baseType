[@lua
baseType = {}
baseType.__index = baseType

function baseType:new(typeFactory, typedef)
   local retObj = { _typeFactory = typeFactory, _typedef = typedef }
   setmetatable(retObj, self)
   return retObj
end

function baseType:instanceOf()
   return self._typedef.struct
end

function baseType:getTypeFactory()
   return self._typeFactory
end

function baseType:typeName()
   return ("xml_%s"):format(self._typedef.struct)
end

function baseType:typeEnum()
   return self:typeName():upper()
end

function baseType:typeHash()
   return sdbm_hash(self:typeName())
end

function baseType:_getType(typedef)
   return self._typeFactory:getType(typedef)
end

function baseType:dclrMarshall()
   return ("static void _%s_marshall(const %s, char **, const xml_typeFactory *);\n"):format(
      self:typeName(), self:typeName())
end

function baseType:dclrUnmarshall()
   return (
      "static %s _%s_unmarshall(const char *, const xml_typeFactory *);\n"
   ):format(
      self:typeName(), self:typeName())
end

function baseType:dclrDestroy()
   return ("static %s _%s_destroy(%s, const xml_typeFactory *);\n"):format(
      self:typeName(), self:typeName(), self:typeName())
end

function baseType:test()
   return ""
end
]