[@lua
include 'c-xml-expat-dom/baseType'

base64 = {}
base64.__index = base64
setmetatable(base64, {__index = baseType})

function base64:new(typeFactory, typedef)
   local retObj = baseType:new(typeFactory, typedef)
   setmetatable(retObj, base64)
   return retObj
end

function base64:typeName()
   return ("xml_base64")
end

function base64:typeDef()
   out = stringBuffer:new()
   out:append("typedef struct xml_base64 {\n")
   out:append("  unsigned  m_size;\n")
   out:append("  void * m_pData;\n")
   out:append("} * xml_base64;\n")
   return out:str()
end

function base64:typeFactoryMethods()
   return ""
end

function base64:defMarshal()
   out = stringBuffer:new()
   out:append("static void\n")
   out:append("_xml_base64_marshal(const xml_base64 val, char ** ppOut, const xml_typeFactory * pFactory) {\n")
   out:append("  base64_encodestate base64Encoder;\n")
   out:append("  const size_t srcSz = val->m_size;\n")
   out:append("  /* size calc from http://www.obviex.com/Articles/CiphertextSize.aspx, \n")
   out:append("     +2 for /n and null termination */\n")
   out:append("  const size_t b64Sz = ((srcSz + 2 - ((srcSz + 2) % 3)) / 3 * 4) + 2;\n")
   out:append("  size_t encodedCnt = 0;\n")
   out:append("  char * outStr = _alloc(b64Sz, pFactory);\n")
   out:append("  base64_init_encodestate(&base64Encoder);\n")
   out:append("  encodedCnt = base64_encode_block(val->m_pData, srcSz, outStr, &base64Encoder);\n")
   out:append("  base64_encode_blockend(outStr + encodedCnt, &base64Encoder);\n")
   out:append("  _cstr_append(ppOut, outStr, pFactory);\n")
   out:append("  outStr = ReallocateMemory(pFactory, outStr, 0);\n")
   out:append("}\n")
   return out:str()
end

function base64:defUnmarshal()
   out = stringBuffer:new()
   out:append("static xml_base64\n")
   out:append("_xml_base64_unmarshal(const char * pVal, const xml_typeFactory * pFactory) {\n")
   out:append("  xml_base64 pRet = _alloc(sizeof(struct xml_base64), pFactory);\n")
   out:append("  base64_decodestate base64Decoder;\n")
   out:append("  const size_t srcLen = strlen(pVal);\n")
   out:append("  const size_t dataSz = ((srcLen * 3) / 4) + 1;\n")
   out:append("  pRet->m_pData = _alloc(dataSz, pFactory);\n")
   out:append("  base64_init_decodestate(&base64Decoder);\n")
   out:append("  base64_decode_block(pVal, srcLen, pRet->m_pData, &base64Decoder);\n")
   out:append("  pRet->m_size = strlen(pRet->m_pData);\n")
   out:append("  return pRet;\n")
   out:append("}\n")
   return out:str()
end

function base64:defDestroy()
   out = stringBuffer:new()
   out:append("static xml_base64\n")
   out:append("_xml_base64_destroy(xml_base64 pVal, const xml_typeFactory * pFactory) {\n")
   out:append("  if (pVal) {\n")
   out:append("    pVal->m_pData = ReallocateMemory(pFactory, pVal->m_pData, 0);\n")
   out:append("    pVal = ReallocateMemory(pFactory, pVal, 0);\n")
   out:append("  }\n")
   out:append("  return pVal;\n")
   out:append("}\n")
   return out:str()
end

function base64:test()
   return "VGhpcyBpcyBhIHRlc3Q=\\n"
end
]