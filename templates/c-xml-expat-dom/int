[@lua
include 'c-xml-expat-dom/baseType'

int = {}
int.__index = int
setmetatable(int, {__index = baseType})

function int:new(typeFactory, typedef)
   local retObj = baseType:new(typeFactory, typedef)
   setmetatable(retObj, int)
   return retObj
end

function int:typeName()
   return ("xml_int")
end

function int:typeDef()
   return ("typedef int32_t * %s;\n"):format(self:typeName())
end

function int:typeFactoryMethods()
   return ""
end

function int:defMarshal(elementName)
   out = stringBuffer:new()
   out:append("static void\n")
   out:append("_xml_int_marshal")
   out:append("(const xml_int pVal, char ** ppOut, const xml_typeFactory * pFactory) {\n")
   out:append("\tchar num[32];\n")
   out:append("\tsnprintf(num, 32, \"%d\", *pVal);\n")
   out:append("\t_cstr_append(ppOut, num, pFactory);\n")
   out:append("}\n")   
   return out:str()
end

function int:defUnmarshal(elementName)
   out = stringBuffer:new()
   out:append("static xml_int\n")
   out:append("_xml_int_unmarshal(")
   out:append("const char * pVal, const xml_typeFactory * pFactory) {\n")
   out:append("\txml_int val = ReallocateMemory(pFactory, NULL, sizeof(int32_t));\n")
   out:append("\treturn (*val  = atoi(pVal)), val;\n")
   out:append("}\n")
   return out:str()
end

function int:defDestroy()
   out = stringBuffer:new()
   out:append("static xml_int\n")
   out:append("_xml_int_destroy")
   out:append("(xml_int pVal, const xml_typeFactory * pFactory) {\n")
   out:append("\tif (pVal) pVal = ReallocateMemory(pFactory, pVal, 0);\n")
   out:append("\treturn pVal;\n")
   out:append("}\n")
   return out:str()
end

function int:test()
   return "29832"
end
]
