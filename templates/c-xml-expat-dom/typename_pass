[@lua
include 'c-xml-expat-dom/shared'

function table:isEqual(tbl)
   local type1 = type(self)
   local type2 = type(tbl)
   if type1 ~= type2 then return false end
   -- non-table types can be directly compared
   if type1 ~= 'table' and type2 ~= 'table' then return self == tbl end
   -- compare table types
   for k1,v1 in pairs(self) do
      local v2 = tbl[k1]
      if v2 == nil or not table.isEqual(v1,v2) then return false end
   end
   for k2,v2 in pairs(tbl) do
      local v1 = self[k2]
      if v1 == nil or not table.isEqual(v1,v2) then return false end
   end
   return true
end

local function _isSameType(typename1, typedef1, typename2, typedef2)
   -- names are not the same, not the same type
   if typename1 == typename2 then
      return table.isEqual(typedef1, typedef2)
   end
   return false
end

local function _isListType(typeName)
   return (typeName:match("^(list)%(.+%)") ~= nil)
end

local function _getListType(typeName)
   return typeName:match("list%((.+)%)")
end

local function printPass(schema)
   local function _traverse(tbl, depth)
      local out = stringBuffer:new()
      depth = depth or 0
      for k,v in pairs(tbl) do
     if "table" == type(v) then
        if next(v) then
           out:append(string.rep("\t", depth)..k.." = {\n")
           out:append(_traverse(v, depth + 1))
           out:append(string.rep("\t", depth).."}\n")
        else
           out:append(string.rep("\t", depth)..k.." = {}\n")
        end
     else
        out:append(string.rep("\t", depth)..k.." = "..v.."\n")
     end
      end
      return out:str()
   end
   return _traverse(schema)
end

function structNamePass(schema)
   local typeTbl = {}
   local function _CSafeName(name)
      if _isListType(name) then
         return 'list('.._CSafeName(_getListType(name))..')'
      else
         return name:gsub('[%$,/,%-,%%,#,@,!,%^,&,*,%(,%),  ,]', '_')
      end
   end
   local function _getType(structName, typedef, nCalls)
      nCalls = nCalls or 2
      structName = _CSafeName(structName)
      if typeTbl[structName] then
         if isSimpleType(typedef) or table.isEqual(typeTbl[structName], typedef) then
           return structName, typedef
         else
           return _getType(structName..nCalls, typedef, nCalls + 1)
         end
      else
        typeTbl[structName] = typedef
        return structName, typedef
      end
   end
   local function _traverse(element)
      for _, atrTypename, atrTypedef in attrIterator(element.attributes) do
         atrTypedef.struct = atrTypename
      end
      for name, typedef in pairs(element.content) do
         -- handle elements being defined multiple times
         local structName, structTypeDef = _getType(name, typedef)
         -- modify schema
         typedef.struct = structName
         _traverse(typedef)
      end
      return element
   end
   return _traverse({ attributes = {}, content = schema }).content
end

--dbgPrint(printPass(structNamePass(schema)))
]